#!/usr/bin/env python3
# /// script
# requires-python = "~=3.12"
# dependencies = [
#     "requests",
#     "typer",
# ]
# ///
from pathlib import Path

import typer

from clients.client import ArtifactType
from clients.sbom import SBOMber
from sbomber import DEFAULT_REPORTS_DIR, DEFAULT_MANIFEST, DEFAULT_STATEFILE, DEFAULT_PACKAGE_DIR, DEFAULT_SERVICE_URL


def main():
    """Sbomber CLI."""
    app = typer.Typer(no_args_is_help=True)

    @app.command()
    def e2e(
            email: str = typer.Argument(
                ...,
                help="The email to notify when the build is ready."
            ),
            department: str = typer.Argument(
                ...,
                help="The department this build belongs to."
            ),
            team: str = typer.Argument(
                ...,
                help="The team this build belongs to."
            ),
            service_url: str = typer.Argument(
                DEFAULT_SERVICE_URL,
                help="The service URL to send API requests to."
            ),
            artifact: Path = typer.Argument(
                ...,
                help="The artifact whose SBOM you want to generate. "
                     f"Currently supported: ({list(ArtifactType)})."
            ),
            version: str = typer.Argument("0", help="Artifact version to associate with the build.")
    ):
        sbomber = SBOMber(
            email=email,
            department=department,
            team=team,
            service_url=service_url

        )

        sbomber.run(
            artifact,
            atype=ArtifactType.from_path(artifact),
            version=version
        )

    parallel = typer.Typer(help="Parallel sbombing tools.")

    @parallel.command()
    def prepare(
            manifest: Path = typer.Argument(
                DEFAULT_MANIFEST,
                help="Path to a manifest file containing the required metadata."
            ),
            statefile: Path = typer.Argument(
                DEFAULT_STATEFILE,
                help="Path to statefile which will be created to hold the sbomber state."
            ),
            pkg_dir: Path = typer.Option(
                DEFAULT_PACKAGE_DIR,
                help="Folder where the collected artifacts will be gathered before uploading them.")
    ):
        return prepare(manifest=manifest, statefile=statefile, pkg_dir=pkg_dir)

    @parallel.command()
    def submit(
            statefile: Path = typer.Argument(
                DEFAULT_STATEFILE,
                help="Path to a statefile holding the sbomber state."
            ),
            pkg_dir: Path = typer.Option(
                DEFAULT_PACKAGE_DIR,
                help="Folder where the collected artifacts will be gathered before uploading them.")

    ):
        return submit(statefile=statefile, pkg_dir=pkg_dir)

    @parallel.command()
    def poll(
            statefile: Path = typer.Argument(
                DEFAULT_STATEFILE,
                help="Path to a statefile holding the sbomber state."
            ),
            wait: bool = typer.Option(
                False,
                is_flag=True,
                help="Wait for all sboms to be in Completed state before exiting."
            ),
            timeout: int = typer.Option(
                15,
                is_flag=True,
                help="Timeout (in minutes) for artifact completion (per artifact)."
            )
    ):
        return poll(statefile=statefile, wait=wait, timeout=timeout)

    @parallel.command()
    def download(
            statefile: Path = typer.Argument(
                DEFAULT_STATEFILE,
                help="Path to a statefile holding the sbomber state."
            ),
            reports_dir: Path = typer.Option(
                DEFAULT_REPORTS_DIR,
                help="Directory in which to drop all downloaded reports."
            )
    ):
        return download(
            statefile=statefile, reports_dir=reports_dir
        )

    app.add_typer(parallel)

    app()


if __name__ == '__main__':
    main()
